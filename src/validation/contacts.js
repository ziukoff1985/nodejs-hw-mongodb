import Joi from 'joi';
import { isValidObjectId } from 'mongoose';

// ‚úÖ –í–∞–ª—ñ–¥–∞—Ç–æ—Ä –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –º–µ—Ç–æ–¥—ñ–≤ POST —ñ PUT)
export const createContactSchema = Joi.object({
  name: Joi.string().min(3).max(20).required().messages({
    'string.base': 'Name must be a string',
    'string.min': 'Name must be at least {#limit} characters long',
    'string.max': 'Name must be at most {#limit} characters long',
    'any.required': 'Name is required',
  }),
  phoneNumber: Joi.string()
    .min(3)
    .max(20)
    .pattern(/^\+?[1-9]\d{6,14}$/) // –î–æ–¥–∞–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    .required()
    .messages({
      'string.pattern.base':
        'Phone number must be a valid number (e.g., +380501234567)',
      'any.required': 'Phone number is required',
    }),
  email: Joi.string().max(50).email().optional().messages({
    'string.email': 'Email must be a valid email address',
  }),
  contactType: Joi.string()
    .valid('work', 'home', 'personal')
    .required()
    .messages({
      'any.only': "Contact type must be one of: 'work', 'home', 'personal'",
      'any.required': 'Contact type is required',
    }),
  isFavourite: Joi.boolean().optional(),
  // –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ userId (–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
  userId: Joi.string()
    .custom((value, helpers) => {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–Ω–∞—á–µ–Ω–Ω—è _id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∞–ª—ñ–¥–Ω–∏–º ObjectId -> —è–∫—â–æ –Ω—ñ, –≤–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      if (value && !isValidObjectId(value)) {
        return helpers.message('User ID should be a valid MongoDB ObjectId');
      }
      return value; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤–∞–ª—ñ–¥–Ω–∏–π _id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    })
    .optional(), // optional -> –≤–∫–∞–∑—É—î, —â–æ –ø–æ–ª–µ userId —î –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º (–π–æ–≥–æ –¥–æ–¥–∞—î —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç—É, –∞ –Ω–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)
});
// üëì .custom -> –º–µ—Ç–æ–¥ Joi –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–æ—ó –ª–æ–≥—ñ–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó, –∫–æ–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –ø—Ä–∞–≤–∏–ª (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, .string(), .required()) –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ.
// –ü—Ä–∏–π–º–∞—î —Ñ—É–Ω–∫—Ü—ñ—é –∑ –¥–≤–æ–º–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: value -> –ó–Ω–∞—á–µ–Ω–Ω—è, —è–∫–µ –≤–∞–ª—ñ–¥—É—î—Ç—å—Å—è (—É –Ω–∞—Å userId —è–∫ —Ä—è–¥–æ–∫) i helpers -> o–±'—î–∫—Ç —ñ–∑ –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –∞–±–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
// –ü–æ–≤–µ—Ä—Ç–∞—î: value -> —è–∫—â–æ –≤–∞–ª—ñ–¥–Ω–µ –∞–±–æ –ø–æ–º–∏–ª–∫—É —á–µ—Ä–µ–∑ helpers.message

// ‚úÖ –í–∞–ª—ñ–¥–∞—Ç–æ—Ä –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –º–µ—Ç–æ–¥—É PATCH)
export const updateContactSchema = Joi.object({
  name: Joi.string().min(3).max(20).optional().messages({
    'string.base': 'Name must be a string',
    'string.min': 'Name must be at least {#limit} characters long',
    'string.max': 'Name must be at most {#limit} characters long',
  }),
  phoneNumber: Joi.string()
    .min(3)
    .max(20)
    .pattern(/^\+?[1-9]\d{6,14}$/)
    .optional()
    .messages({
      'string.pattern.base':
        'Phone number must be a valid number (e.g., +380501234567)',
    }),
  email: Joi.string().max(50).email().optional().messages({
    'string.email': 'Email must be a valid email address',
  }),
  contactType: Joi.string()
    .valid('work', 'home', 'personal')
    .optional()
    .messages({
      'any.only': "Contact type must be one of: 'work', 'home', 'personal'",
    }),
  isFavourite: Joi.boolean().optional(),
})
  // "or --> –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ö–æ—á–∞ –± –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è –ø—Ä–∏ PATCH –∑–∞–ø–∏—Ç—ñ"
  .or('name', 'phoneNumber', 'email', 'contactType', 'isFavourite')
  .messages({
    'object.missing': 'At least one field must be provided for update',
  });
